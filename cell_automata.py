# -*- coding: utf-8 -*-
"""
Created on Thu Mar 12 17:51:14 2020

@author: Alessio Giuseppe Ferraioli

CELL AUTOMATA GAME

ci provo

"""


def generate_state(nsteps):
    '''function that returns the initial state 000010000 with length equal to nsteps+2
    
    the 0 is placed at center if nsteps is odd; if nsteps is even it is placed on the right of the center
    
    it may be generalized to generate different states, maybe random ones'''
    
    state='0'           # initialize the states as a string of a single .
    for i in range(nsteps+1):           
        if i==(nsteps//2):
            state=state+'1'      # appends a 1 (alive) if we are at the center 
        else:
            state=state+'0'     # appends a 0 (dead) for any other i
    
    return state


def evolve(old_state, rule):
    '''takes in input a state and a numeric rule; returns the evolved state for the next step. 
    the rules of the evolution are given by Rule30 by Wolfram, available at:
        https://mathworld.wolfram.com/Rule30.html'''
    
    
    rule_bin=bin(rule)      # converts the number in a binary string
    
    winning=[]          # initialize the list of "winning numbers"
    
    for i in range(len(rule_bin)):
        if rule_bin[i]=='1':
            winning.append(len(rule_bin)-i-1)           # append to the winning numbers the positions of the 1s in the binary rule
            
    # initialize the new state as all 0s
    new_state='0'
    for i in range(len(old_state)-1):
        new_state=new_state+'0'
    
    # i use the convention that the boundaries are always dead because it's the simplest condition to implementate (I simply do not check for the boundaries and left them in the dead state)    
    for i in range(len(old_state)-2):        # l'indice i mi fa avanzare lungo il mio stato considerando 3 caselle alla volta
        casella_bin=int(old_state[i:i+3], base=2)      # interpreto la casella come un numero binario e lo salvo in casella_bin
        
        for j in range(len(winning)):                       # l'indice j mi fa confrontare la casella [i:i+2] con ogni j-esimo winning parameter          
            if(casella_bin==winning[j]):        # confronto il valore numerico della casella col j-esimo elemento di winning
                new_state=new_state[:i+1]+'1'+new_state[i+2:]
        
    return new_state


def simulation(nsteps, rule):
    '''main function: it is the actual simulation.
    it takes in input the numbero of steps on which the simulation is ran.
    from an initial state generated by generate_state produces a new evolved state by using evolve and iterate the procuder nsteps times
    returns the sequence of all the nsteps states in a list states_seq'''
    
    initial_state = generate_state(nsteps)  # generate the initial state 
    states_seq = [initial_state]      # initialize the sequence of states with the first one   
    for i in range(nsteps):
        old_state = states_seq[-1]      # save the latest state in a temporary variable old_state
        new_state = evolve(old_state, rule)   # create a new state by evolve function on the old_state and save it in the variable new_state 
        states_seq.append(new_state)    # append the new state in the list states.seq
    return states_seq




########################################################

def test_generation_valid_state():
    'tests that in the state generated by generate_state the only characters are . (dead) and 0 (alive)'
    state = generate_state()
    assert set(state) == {'.', '0'}
    

def test_generation_single_alive():
    'tests that there is only one alive cell in the generated state'
    state = generate_state()
    num_of_0 = sum(1 for i in state if i=='0')
    assert num_of_0 == 1
    

def format_print(state):
    ''' functoin to print the state in a more readable format,
    substituing the 0s with '.' and the 1s with '*' '''
    return ''.join('*' if i=='1' else '.' for i in state)


# start the cell automaton
states_seq=simulation(10, 50)


for i in range(len(states_seq)):
    print(format_print(states_seq[i]))
        